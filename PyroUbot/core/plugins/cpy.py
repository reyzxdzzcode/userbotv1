import asyncio
from gc import get_objects

from pyrogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                            InlineQueryResultArticle, InputTextMessageContent)

from PyroUbot import *


async def copy_bot_msg(client, message):
    if message.from_user.id not in ubot._get_my_id:
        return
    Tm = await message.reply("·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä")
    link = get_arg(message)
    if not link:
        return await Tm.edit(
            f"<b><code>{message.text}</code> [ ü…™…¥·¥ã_·¥ã·¥è…¥·¥õ·¥á…¥_·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç]</b>"
        )
    if link.startswith(("https", "t.me")):
        msg_id = int(link.split("/")[-1])
        if "t.me/c/" in link:
            chat = int("-100" + str(link.split("/")[-2]))
        else:
            chat = str(link.split("/")[-2])
        try:
            get = await client.get_messages(chat, msg_id)
            await get.copy(message.chat.id)
            await Tm.delete()
        except Exception as error:
            await Tm.edit(error)
    else:
        await Tm.edit("·¥ç·¥Äs·¥ú·¥ã·¥ã…™…¥  ü…™…¥·¥ã  è·¥Ä…¥…¢ ·¥†·¥Ä ü…™·¥Ö")


async def copy_ubot_msg(client, message):
    msg = message.reply_to_message or message
    Tm = await message.reply("·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä")
    link = get_arg(message)
    if not link:
        return await Tm.edit(
            f"<b><code>{message.text}</code> [ ü…™…¥·¥ã_·¥ã·¥è…¥·¥õ·¥á…¥_·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç]</b>"
        )
    if link.startswith(("https", "t.me")):
        msg_id = int(link.split("/")[-1])
        if "t.me/c/" in link:
            chat = int("-100" + str(link.split("/")[-2]))
        else:
            chat = str(link.split("/")[-2])
        try:
            get = await client.get_messages(chat, msg_id)
            await get.copy(message.chat.id, reply_to_message_id=msg.id)
            await Tm.delete()
        except Exception:
            try:
                text = f"get_msg {id(message)}"
                x = await client.get_inline_bot_results(bot.me.username, text)
                await client.send_inline_bot_result(
                    message.chat.id,
                    x.query_id,
                    x.results[0].id,
                    reply_to_message_id=msg.id,
                )
            except Exception:
                await client.send_message(
                    message.chat.id,
                    f"<b>üîí ·¥ã·¥è…¥·¥õ·¥á…¥  è·¥Ä…¥…¢ ·¥ç·¥Ä·¥ú ·¥Ö…™·¥Ä·¥ç ô…™ ü  ô·¥á Äs…™Íú∞·¥Ä·¥õ  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Öd\n\nüëâüèª <a href=https://t.me/{bot.me.username}?start=copyMsg_{id(message)}>·¥ã ü…™·¥ã ·¥Ö…™s…™…¥…™</a> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥ú·¥ã·¥Ä ·¥ã·¥è…¥·¥õ·¥á…¥  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö</b>",
                    reply_to_message_id=msg.id,
                )
            await Tm.delete()
    else:
        await Tm.edit("·¥ç·¥Äs·¥ú·¥ã·¥ã…™…¥  ü…™…¥·¥ã  è·¥Ä…¥…¢ ·¥†·¥Ä ü…™·¥Ö")


async def copy_inline_msg(client, inline_query):
    await client.answer_inline_query(
        inline_query.id,
        cache_time=0,
        results=[
            (
                InlineQueryResultArticle(
                    title="get message!",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="üîê  ô·¥ú·¥ã·¥Ä ·¥ã·¥è…¥·¥õ·¥á…¥  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö üîê",
                                    callback_data=f"copymsg_{int(inline_query.query.split()[1])}",
                                )
                            ],
                        ]
                    ),
                    input_message_content=InputTextMessageContent(
                        "<b>üîí ·¥ã·¥è…¥·¥õ·¥á…¥  è·¥Ä…¥…¢ ·¥ç·¥Ä·¥ú ·¥Ö…™·¥Ä·¥ç ô…™ ü  ô·¥á Äs…™Íú∞·¥Ä·¥õ  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö\n\n‚úÖ ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥ú·¥ã·¥Ä ·¥ã·¥è…¥·¥õ·¥á…¥  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö</b>"
                    ),
                )
            )
        ],
    )


async def copy_callback_msg(client, callback_query):
    try:
        q = int(callback_query.data.split("_", 1)[1])
        m = [obj for obj in get_objects() if id(obj) == q][0]
        if not callback_query.from_user.id == m.from_user.id:
            return await callback_query.answer(
                f"‚ùå ·¥õ·¥è·¥ç ô·¥è ü …™…¥…™  ô·¥ú·¥ã·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥ú {callback_query.from_user.first_name} {callback_query.from_user.last_name or ''}",
                True,
            )
        else:
            await m._client.unblock_user(bot.me.username)
            await callback_query.edit_message_text("<b>·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä</b>")
            copy = await m._client.send_message(
                bot.me.username, f"/copy {m.text.split()[1]}"
            )
            await asyncio.sleep(1.5)
            await copy.delete()
            async for get in m._client.search_messages(bot.me.username, limit=1):
                await m._client.copy_message(m.chat.id, bot.me.username, get.id)
                await callback_query.edit_message_text(
                    "<b>‚úÖ ·¥Ñ·¥è·¥ò è ·¥ç·¥áss·¥Ä…¢·¥á  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ü·¥Ä·¥ã·¥ú·¥ã·¥Ä…¥"
                )
                await get.delete()
    except Exception as error:
        await callback_query.edit_message_text(f"<code>{error}</code>")
