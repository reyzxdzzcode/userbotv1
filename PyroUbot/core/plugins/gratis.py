import asyncio
import importlib
from datetime import datetime, timedelta

from pyrogram.enums import SentCodeType
from pyrogram.errors import *
from pyrogram.raw import functions
from pyrogram.types import *
from pytz import timezone

from PyroUbot import *


async def need_gratis(client, callback_query):
    user_id = callback_query.from_user.id
    if user_id in ubot._get_my_id:
        buttons = [
            [InlineKeyboardButton("·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data=f"home {user_id}")],
        ]
        return await callback_query.edit_message_text(
            f"""
<b>·¥Ä…¥·¥Ö·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>
<b>J…™·¥ã·¥Ä ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ä…¥·¥Ö·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥Ö…™…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã ü…™·¥ã: /restart</b>
""",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    elif len(ubot._ubot) + 1 > MAX_BOT:
        buttons = [
            [InlineKeyboardButton("·¥õ·¥ú·¥õ·¥ú·¥ò", callback_data="0_cls")],
        ]
        return await callback_query.edit_message_text(
            f"""
<b>‚ùå ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ!</b>

<b>üìö ·¥ã·¥Ä Ä·¥á…¥·¥Ä ·¥ç·¥Ä·¥ãs…™·¥ç·¥Ä ü ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú {Fonts.smallcap(str(len(ubot._ubot)))} ·¥õ·¥á ü·¥Ä ú ·¥õ·¥á Ä·¥Ñ·¥Ä·¥ò·¥Ä…™</b>

<b>‚òéÔ∏è s…™ ü·¥Ä ú·¥ã·¥Ä…¥  ú·¥ú ô·¥ú…¥…¢…™: <a href=tg://openmessage?user_id={6995861464}>·¥Ä·¥Ö·¥ç…™…¥</a> ·¥ä…™·¥ã·¥Ä ·¥ç·¥Ä·¥ú ·¥Ö…™ ô·¥ú·¥Ä·¥õ·¥ã·¥Ä…¥  ô·¥è·¥õ s·¥á·¥ò·¥á Ä·¥õ…™ s·¥Ä è·¥Ä</b>
""",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    else:
        buttons = [[InlineKeyboardButton(" ü·¥Ä…¥·¥ä·¥ú·¥õ·¥ã·¥Ä…¥", callback_data="gratis")]]
        return await callback_query.edit_message_text(
            """
<b>‚úÖ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ s…™·¥Ä·¥ò·¥ã·¥Ä…¥  ô·¥Ä ú·¥Ä…¥  ô·¥á Ä…™·¥ã·¥ú·¥õ

    ‚Ä¢ <code>·¥Ä·¥ò…™_…™·¥Ö</code>: ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥Ö·¥Ä Ä…™ my.telegram.org
    ‚Ä¢ <code>·¥Ä·¥ò…™_ ú·¥Äs ú</code>: ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥Ö·¥Ä Ä…™ my.telegram.org
    ‚Ä¢ <code>·¥ò ú·¥è…¥·¥á_…¥·¥ú·¥ç ô·¥á Ä</code>: …¥·¥è·¥ç·¥á Ä  ú·¥ò ·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç

‚òëÔ∏è ·¥ä…™·¥ã·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è…™ ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú</b>
""",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons),
        )


async def bikin_gratis(client, callback_query):
    user_id = callback_query.from_user.id
    try:
        await callback_query.message.delete()
        api = await bot.ask(
            user_id,
            (
                "<b>s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ ·¥Ä·¥ò…™_…™·¥Ö</b>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥ò·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s")
    if await is_cancel(callback_query, api.text):
        return
    api_id = api.text
    try:
        hash = await bot.ask(
            user_id,
            (
                "<b>s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ ·¥Ä·¥ò…™_ ú·¥Äs ú</b>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥ò·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s")
    if await is_cancel(callback_query, hash.text):
        return
    api_hash = hash.text
    try:
        phone = await bot.ask(
            user_id,
            (
                "<b>s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ …¥·¥è·¥ç·¥è Ä ·¥õ·¥á ü·¥á·¥ò·¥è…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥á…¥…¢·¥Ä…¥ Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥ã·¥è·¥Ö·¥á …¥·¥á…¢·¥Ä Ä·¥Ä.\n·¥Ñ·¥è…¥·¥õ·¥è ú: +628xxxxxxx</b>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥ò·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s")
    if await is_cancel(callback_query, phone.text):
        return
    phone_number = phone.text
    new_client = Ubot(
        name=str(callback_query.id),
        api_id=api_id,
        api_hash=api_hash,
        in_memory=False,
    )
    get_otp = await bot.send_message(user_id, "<b>·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò...</b>")
    await new_client.connect()
    try:
        code = await new_client.send_code(phone_number.strip())
    except ApiIdInvalid as AID:
        await get_otp.delete()
        return await bot.send_message(user_id, AID)
    except PhoneNumberInvalid as PNI:
        await get_otp.delete()
        return await bot.send_message(user_id, PNI)
    except PhoneNumberFlood as PNF:
        await get_otp.delete()
        return await bot.send_message(user_id, PNF)
    except PhoneNumberBanned as PNB:
        await get_otp.delete()
        return await bot.send_message(user_id, PNB)
    except PhoneNumberUnoccupied as PNU:
        await get_otp.delete()
        return await bot.send_message(user_id, PNU)
    except Exception as error:
        await get_otp.delete()
        return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    try:
        sent_code = {
            SentCodeType.APP: "<a href=tg://openmessage?user_id=777000>·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç</a>  Ä·¥ás·¥ç…™",
            SentCodeType.SMS: "s·¥çs ·¥Ä…¥·¥Ö·¥Ä",
            SentCodeType.CALL: "·¥ò·¥Ä…¥…¢…¢…™ ü·¥Ä…¥ ·¥õ·¥á ü·¥ò·¥è…¥",
            SentCodeType.FLASH_CALL: "·¥ò·¥Ä…¥…¢…¢…™ ü·¥Ä…¥ ·¥ã…™ ü·¥Ä·¥õ ·¥õ·¥á ü·¥á·¥ò·¥è…¥",
            SentCodeType.FRAGMENT_SMS: "Íú∞ Ä·¥Ä…¢·¥ç·¥á…¥·¥õ s·¥çs",
            SentCodeType.EMAIL_CODE: "·¥á·¥ç·¥Ä…™ ü ·¥Ä…¥·¥Ö·¥Ä",
        }
        await get_otp.delete()
        otp = await bot.ask(
            user_id,
            (
                f"<b>s…™ ü·¥Ä·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™·¥ãs·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ö·¥Ä Ä…™ {sent_code[code.type]}. ·¥ã…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥ã·¥á s…™…¥…™ s·¥á·¥õ·¥á ü·¥Ä ú ·¥ç·¥á·¥ç ô·¥Ä·¥Ñ·¥Ä Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú …™…¥…™.</b>\n"
                "\n·¥ä…™·¥ã·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ä·¥Ö·¥Ä ü·¥Ä ú <·¥Ñ·¥è·¥Ö·¥á>12345</·¥Ñ·¥è·¥Ö·¥á> ·¥õ·¥è ü·¥è…¥…¢ <b>[ ·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥ò·¥Äs…™ ]</b> ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ s·¥á·¥ò·¥á Ä·¥õ…™ …™…¥…™ <code>1 2 3 4 5</code>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥°·¥Ä·¥ã·¥õ·¥ú ·¥õ·¥á ü·¥Ä ú  ú·¥Ä ô…™s")
    if await is_cancel(callback_query, otp.text):
        return
    otp_code = otp.text
    try:
        await new_client.sign_in(
            phone_number.strip(),
            code.phone_code_hash,
            phone_code=" ".join(str(otp_code)),
        )
    except PhoneCodeInvalid as PCI:
        return await bot.send_message(user_id, PCI)
    except PhoneCodeExpired as PCE:
        return await bot.send_message(user_id, PCE)
    except BadRequest as error:
        return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    except SessionPasswordNeeded:
        try:
            two_step_code = await bot.ask(
                user_id,
                "<b>·¥Ä·¥ã·¥ú…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™Íú∞·¥ã·¥Ä…¥ ·¥†·¥á Ä…™Íú∞…™·¥ã·¥Äs…™ ·¥Ö·¥ú·¥Ä  ü·¥Ä…¥…¢·¥ã·¥Ä ú. s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ ·¥ò·¥Äss·¥°·¥è Ä·¥Ö…¥ è·¥Ä.\n\n…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>",
                timeout=300,
            )
        except asyncio.TimeoutError:
            return await bot.send_message(user_id, "·¥ò·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s")
        if await is_cancel(callback_query, two_step_code.text):
            return
        new_code = two_step_code.text
        try:
            await new_client.check_password(new_code)
            await set_two_factor(user_id, new_code)
        except Exception as error:
            return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    session_string = await new_client.export_session_string()
    await new_client.disconnect()
    new_client.storage.session_string = session_string
    new_client.in_memory = False
    bot_msg = await bot.send_message(
        user_id,
        "s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás....\n\ns…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä",
        disable_web_page_preview=True,
    )
    await new_client.start()
    if not user_id == new_client.me.id:
        ubot._ubot.remove(new_client)
        await rem_two_factor(new_client.me.id)
        return await bot_msg.edit(
            "<b> ú·¥Ä Ä·¥Ä·¥ò …¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ …¥·¥è·¥ç·¥á Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö·¥Ä ·¥Ö…™ ·¥Ä·¥ã·¥ú…¥ ·¥Ä…¥·¥Ö·¥Ä s·¥Ä·¥Ä·¥õ …™…¥…™ ·¥Ö·¥Ä…¥  ô·¥ú·¥ã·¥Ä…¥ …¥·¥è·¥ç·¥á Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ö·¥Ä Ä…™ ·¥Ä·¥ã·¥ú…¥  ü·¥Ä…™…¥</>"
        )
    now = datetime.now(timezone("Asia/Jakarta"))
    expire_date = now + timedelta(days=3)
    await set_expired_date(new_client.me.id, expire_date)
    await add_ubot(
        user_id=int(new_client.me.id),
        api_id=api_id,
        api_hash=api_hash,
        session_string=session_string,
    )
    for mod in loadModule():
        importlib.reload(importlib.import_module(f"PyroUbot.modules.{mod}"))
    text_done = f"·¥Ö·¥Ä…¥ ·¥ús·¥á Ä ô·¥è·¥õ<b>üî• {bot.me.mention}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™·¥Ä·¥ã·¥õ…™Íú∞·¥ã·¥Ä…¥ ·¥Ö…™ ·¥Ä·¥ã·¥ú…¥: <a href=tg://openmessage?user_id={new_client.me.id}>{new_client.me.first_name} {new_client.me.last_name or ''}</a> > <code>{new_client.me.id}</code></b> "
    await bot_msg.edit(text_done)
    try:
        await new_client.join_chat("Userlogsbott")
    except UserAlreadyParticipant:
        pass
    return await bot.send_message(
        LOGS_MAKER_UBOT,
        f"""
<b>·¥Ö·¥Ä…¥ ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ö…™·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥</b>
<b>·¥Ä·¥ã·¥ú…¥:</b> <a href=tg://user?id={new_client.me.id}>{new_client.me.first_name} {new_client.me.last_name or ''}</a> 
<b>…™·¥Ö:</b> <code>{new_client.me.id}</code>
""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìÅ ·¥Ñ·¥á·¥ã ·¥ç·¥Äs·¥Ä ·¥Ä·¥ã·¥õ…™“ì üìÅ",
                        callback_data=f"cek_masa_aktif {new_client.me.id}",
                    )
                ],
            ]
        ),
        disable_web_page_preview=True,
    )


async def is_cancel(callback_query, text):
    if text.startswith("/cancel"):
        await bot.send_message(
            callback_query.from_user.id, "<b>·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás!</b>"
        )
        return True
    return False
